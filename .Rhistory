dplyr::group_by(currency) %>%
dplyr::mutate(spot = imputeTS::na_locf(spot),
day_count = as.numeric(difftime(maturity, Sys.Date()))) %>%
tidyr::drop_na(forwards, funding, investment, spot)
fx_swap_returns <- df %>%
dplyr::group_by(currency) %>%
dplyr::mutate(
forward_rate = dplyr::if_else(
stringr::str_starts(string = currency, pattern = "USD"),
spot + (forwards / fwd_convention),
1 / (spot + (forwards / fwd_convention))
),
forward_rate = spot + (forwards / fwd_convention),
proceeds = fc_notional / spot,
forward_amt = fc_notional / forward_rate,
fx_swap_rate = fx_base_convention * 100 * ((( forward_amt - proceeds) / proceeds) / (day_count)) * day_convention,
total_return = (fx_swap_rate - funding + investment) * (365 / day_convention) * 100,
return_usd = proceeds * total_return / fwd_convention *
(day_count / day_convention)
)
# # plot_data <- dplyr::filter(fx_swap_returns, base == git comm"EUR")
# plot_term_structure(plot_data, xlab = "maturity", ylab = "total_return", fill = "currency", polynomial_order = 3)
fx_dt <- fx_swap_returns %>%
dplyr::arrange(currency, maturity) %>%
dplyr::select(currency,
term,
base,
funding,
investment,
fx_swap_rate,
total_return,
return_usd)
# time series -------------------------------------------------------------
# all_frames <- list()
#
# for (fields in unique_fields){
#
#   sec_data <- config %>%
#     dplyr::filter(field == fields)
#
#   all_frames[[fields]] <-
#     bloomberg_query(sec_data$ticker,
#                     c(fields),
#                     Sys.Date() - 365*5,
#                     Sys.Date())
# }
#
# df <- all_frames %>%
#   data.table::rbindlist() %>%
#   unique() %>%
#   dplyr::left_join(config, by = c("Security" = "ticker", "Field" = "field")) %>%
#   dplyr::mutate(
#     day_convention = dplyr::if_else(grepl(
#       pattern = c("CAD"),
#       x = currency,
#       ignore.case = T
#     ), 360, 365),
#     fwd_convention = dplyr::if_else(grepl(
#       pattern = c("JPY"),
#       x = currency,
#       ignore.case = T
#     ), 100, 10000),
#     fc_notional = dplyr::if_else(grepl(
#       pattern = c("JPY"),
#       x = currency,
#       ignore.case = T
#     ), 100e9, 100e6),
#     fx_base_convention = dplyr::if_else(
#       stringr::str_starts(string = currency, pattern = "USD"), 1, -1)
#   )  %>%
#   dplyr::distinct(.keep_all = T) %>%
#   dplyr::select(Date,
#                 type,
#                 term,
#                 mat_days,
#                 Value,
#                 currency,
#                 day_convention,
#                 fwd_convention,
#                 fc_notional,
#                 fx_base_convention) %>%
#   tidyr::spread(key = type, value = Value) %>%
#   dplyr::group_by(currency, Date) %>%
#   dplyr::mutate(spot = imputeTS::na_locf(spot),
#                 day_count = as.numeric(mat_days)
#   ) %>%
#   tidyr::drop_na(forwards, funding, investment, spot)
#
#
# fx_swap_returns <- df %>%
#   dplyr::group_by(currency) %>%
#   dplyr::mutate(
#     forward_rate = dplyr::if_else(
#       stringr::str_starts(string = currency, pattern = "USD"),
#       spot + (forwards / fwd_convention),
#       1 / (spot + (forwards / fwd_convention))
#     ),
#     forward_rate = spot + (forwards / fwd_convention),
#     proceeds = fc_notional / spot,
#     forward_amt = fc_notional / forward_rate,
#     fx_swap_rate = fx_base_convention * 100 * ((( forward_amt - proceeds) / proceeds) / (day_count)) * day_convention,
#     total_return = (fx_swap_rate - funding + investment) * (365 / day_convention) * 100,
#     return_usd = proceeds * total_return / fwd_convention *
#       (day_count / day_convention)
#   )
#
#
# plot_data <- fx_swap_returns %>% dplyr::mutate(currency = paste0(currency, " - ", term)) %>% dplyr::filter(term %in% c("1W", "1M", "3M", "1Y"))
# make_line_plot(plot_data, xlab = "Date", ylab = "total_return", fill = "currency", name = "currency")
#
#
}
View(df)
fx_swap_returns <- df %>%
dplyr::group_by(currency) %>%
dplyr::mutate(
forward_rate = dplyr::if_else(
stringr::str_starts(string = currency, pattern = "USD"),
spot + (forwards / fwd_convention),
1 / (spot + (forwards / fwd_convention))
),
forward_rate = spot + (forwards / fwd_convention),
proceeds = fc_notional / spot,
forward_amt = fc_notional / forward_rate,
fx_swap_rate = fx_base_convention * 100 * ((( forward_amt - proceeds) / proceeds) / (day_count)) * day_convention,
total_return = (fx_swap_rate - funding + investment) * (365 / day_convention) * 100,
return_usd = proceeds * total_return / fwd_convention *
(day_count / day_convention)
)
View(fx_swap_returns)
source("//markets/DATA/DATA/Offdata/FX/FX Dealers/_FX_jobs/FXScheduledJobs/tasks/BREreport/run_report.R")
source("//markets/DATA/DATA/Offdata/FX/FX Dealers/_FX_jobs/FXScheduledJobs/tasks/BREreport/run_report.R")
source("//markets/DATA/DATA/Offdata/FX/FX Dealers/_FX_jobs/FXScheduledJobs/tasks/BREreport/run_report.R")
source("//markets/DATA/DATA/Offdata/FX/FX Dealers/_FX_jobs/FXScheduledJobs/tasks/BREreport/run_report.R")
source("//markets/DATA/DATA/Offdata/FX/FX Dealers/_FX_jobs/FXScheduledJobs/tasks/BREreport/run_report.R")
source("//markets/DATA/DATA/Offdata/FX/FX Dealers/_FX_jobs/FXScheduledJobs/tasks/BREreport/run_report.R")
source("//markets/DATA/DATA/Offdata/FX/FX Dealers/_FX_jobs/FXScheduledJobs/tasks/BREreport/run_report.R")
# HTML formatting
body <- stringr::str_c(
paste0("Please find the latest BRE report attached, the report was generated at  ", format(run_date, "%d-%b %Y, %H:%M"),
" \n \n ",
"<br>",
"<br>",
" Nostro report results:",
"<br>",
paste0(
"<html><head>
<style>
body{font-family:Arial, \"sans-serif\";}
table{border-left:1px solid #000000;border-top:1px solid #000000;}
table td{border-right:1px solid #000000;border-bottom:1px solid #000000;font-size:12px; font-weight:normal;}
table th{border-right:1px solid #000000;border-bottom:1px solid #000000;font-size:14px;}
</style>
</head><body>",
nostro_result,
"</body></html>"
),
"<br>",
"<br>",
"\n  ",
" Repo short covers (up to t + 10):",
" <br> ",
" <br> ",
paste0(
"<html><head>
<style>
body{font-family:Arial, \"sans-serif\";}
table{border-left:1px solid #000000;border-top:1px solid #000000;}
table td{border-right:1px solid #000000;border-bottom:1px solid #000000;font-size:12px; font-weight:normal;}
table th{border-right:1px solid #000000;border-bottom:1px solid #000000;font-size:14px;}
</style>
</head><body>",
repo_shorts_results,
"</body></html>"
),
"<br>",
"<br>",
"\n  ",
" Repo specials rolling off (up to t + 10):",
" <br> ",
" <br> ",
paste0(
"<html><head>
<style>
body{font-family:Arial, \"sans-serif\";}
table{border-left:1px solid #000000;border-top:1px solid #000000;}
table td{border-right:1px solid #000000;border-bottom:1px solid #000000;font-size:12px; font-weight:normal;}
table th{border-right:1px solid #000000;border-bottom:1px solid #000000;font-size:14px;}
</style>
</head><body>",
repo_special_results,
"</body></html>"
),
"<br>",
"<br>",
"if you have any questions please contact: \n \n ",
"<br>",
"<br>",
"Nicole.Webster@bankofengland.co.uk   or \n ",
"<br>",
"Nirvar.Singh@bankofengland.co.uk \n \n \n ",
"<br>",
"<br>",
"Note: this is an automated email."
))
Outlook <- RDCOMClient::COMCreate("Outlook.Application")
Email = Outlook$CreateItem(0)
Email[["to"]] = paste(static$email, collapse = "; ")
Email[["subject"]] = paste0("BRE daily report ", format(run_date, "%d-%b %Y"))
Email[["HTMLbody"]] = body
Email[["attachments"]]$Add(file.path(ROOT, "tasks", "BREreport", file_name))
static
static$email
repo_special_results
nostro_result <- c(nostro_errors, nostro_warnings) %>%
tidyr::as_tibble() %>%
magrittr::set_names(c("")) %>%
tableHTML::tableHTML(rownames = FALSE)
nostro_errors
nostro_warnings
nostro <- c(nostro_errors, nostro_warnings)
run_date <- Sys.time()
nostro <- c(nostro_errors, nostro_warnings)
if(nrow(nostro) > 0){
nostro_result <- c(nostro_errors, nostro_warnings) %>%
tidyr::as_tibble() %>%
magrittr::set_names(c("")) %>%
tableHTML::tableHTML(rownames = FALSE)
} else{
nostro_result <- data.frame()
}
nostro <- c(nostro_errors, nostro_warnings)
nrow(nostro)
nostro
if(is.null(nostro)){
nostro_result <- c(nostro_errors, nostro_warnings) %>%
tidyr::as_tibble() %>%
magrittr::set_names(c("")) %>%
tableHTML::tableHTML(rownames = FALSE)
} else{
nostro_result <- data.frame()
}
nostro <- c(nostro_errors, nostro_warnings)
if(is.null(nostro)){
nostro_result <- c(nostro_errors, nostro_warnings) %>%
tidyr::as_tibble() %>%
magrittr::set_names(c("")) %>%
tableHTML::tableHTML(rownames = FALSE)
} else{
nostro_result <- data.frame()
}
is.null(nostro)
nostro <- c(nostro_errors, nostro_warnings)
if(!is.null(nostro)){
nostro_result <- c(nostro_errors, nostro_warnings) %>%
tidyr::as_tibble() %>%
magrittr::set_names(c("")) %>%
tableHTML::tableHTML(rownames = FALSE)
} else{
nostro_result <- data.frame()
}
repo_shorts_results <- shorts %>%
tidyr::as_tibble() %>%
tableHTML::tableHTML(rownames = FALSE)
repo_special_results <- specials %>%
tidyr::as_tibble() %>%
tableHTML::tableHTML(rownames = FALSE)
# HTML formatting
body <- stringr::str_c(
paste0("Please find the latest BRE report attached, the report was generated at  ", format(run_date, "%d-%b %Y, %H:%M"),
" \n \n ",
"<br>",
"<br>",
" Nostro report results:",
"<br>",
paste0(
"<html><head>
<style>
body{font-family:Arial, \"sans-serif\";}
table{border-left:1px solid #000000;border-top:1px solid #000000;}
table td{border-right:1px solid #000000;border-bottom:1px solid #000000;font-size:12px; font-weight:normal;}
table th{border-right:1px solid #000000;border-bottom:1px solid #000000;font-size:14px;}
</style>
</head><body>",
nostro_result,
"</body></html>"
),
"<br>",
"<br>",
"\n  ",
" Repo short covers (up to t + 10):",
" <br> ",
" <br> ",
paste0(
"<html><head>
<style>
body{font-family:Arial, \"sans-serif\";}
table{border-left:1px solid #000000;border-top:1px solid #000000;}
table td{border-right:1px solid #000000;border-bottom:1px solid #000000;font-size:12px; font-weight:normal;}
table th{border-right:1px solid #000000;border-bottom:1px solid #000000;font-size:14px;}
</style>
</head><body>",
repo_shorts_results,
"</body></html>"
),
"<br>",
"<br>",
"\n  ",
" Repo specials rolling off (up to t + 10):",
" <br> ",
" <br> ",
paste0(
"<html><head>
<style>
body{font-family:Arial, \"sans-serif\";}
table{border-left:1px solid #000000;border-top:1px solid #000000;}
table td{border-right:1px solid #000000;border-bottom:1px solid #000000;font-size:12px; font-weight:normal;}
table th{border-right:1px solid #000000;border-bottom:1px solid #000000;font-size:14px;}
</style>
</head><body>",
repo_special_results,
"</body></html>"
),
"<br>",
"<br>",
"if you have any questions please contact: \n \n ",
"<br>",
"<br>",
"Nicole.Webster@bankofengland.co.uk   or \n ",
"<br>",
"Nirvar.Singh@bankofengland.co.uk \n \n \n ",
"<br>",
"<br>",
"Note: this is an automated email."
))
Outlook <- RDCOMClient::COMCreate("Outlook.Application")
Email = Outlook$CreateItem(0)
Email[["to"]] = paste(static$email, collapse = "; ")
Email[["subject"]] = paste0("BRE daily report ", format(run_date, "%d-%b %Y"))
Email[["HTMLbody"]] = body
Email[["attachments"]]$Add(file.path(ROOT, "tasks", "BREreport", file_name))
Email$Send()
flog.info("Email sent")
# Delete the temporary file created earlier
if(file.exists("~/temprMarkdownRender")){
unlink("~/temprMarkdownRender", recursive = TRUE)
}
flog.info(Sys.time())
flog.info("Finished")
source("//markets/DATA/DATA/Offdata/FX/FX Dealers/_FX_jobs/FXScheduledJobs/tasks/BREreport/run_report.R")
source("//markets/DATA/DATA/Offdata/FX/FX Dealers/_FX_jobs/FXScheduledJobs/tasks/BREreport/run_report.R")
source("//markets/DATA/DATA/Offdata/FX/FX Dealers/_FX_jobs/FXScheduledJobs/tasks/BREreport/run_report.R")
source("//markets/DATA/DATA/Offdata/FX/FX Dealers/_FX_jobs/FXScheduledJobs/tasks/BREreport/run_report.R")
source("\\\\istdba/BuildArchive/ShinyApps/EnvironmentScript/EnvironmentScript_Latest/LOCAL/Artifactory/environment.R")
# Use this method to avoid drive mappings in dynamic loading of content
FX_PATH <- function(subpath) {
file.path("\\\\markets-nwsrv/DATA/Offdata/FX/FX Dealers", subpath)
}
# boe checkpoint
checkpoint_date <- "2022-01-01"
message(paste0("checkpoint_date: ", checkpoint_date))
boeCheckpoint(checkpoint_date, scanForPackages = FALSE)
ROOT <- FX_PATH(subpath = "_FX_jobs/FXScheduledJobs")
# library(ggplot2)
library(dplyr)
library(ggplot2)
library(dplyr)
library(DT)
library(futile.logger)
library(janitor)
library(readr)
library(tableHTML)
library(taskscheduleR)
RDCOM_str <- "library(RDCOMClient, lib.loc = 'N:/Offdata/RM/_R code repository/RMPackages/_R4.0')"
eval(parse(text=RDCOM_str))
clean_tmpfiles_mod <- function() {
message("Calling clean_tmpfiles_mod()")
}
assignInNamespace("clean_tmpfiles", clean_tmpfiles_mod, ns = "rmarkdown")
flog.info("--------------- Started ---------------")
if(as.numeric(R.Version()$major) < 4) flog.error("R version needs to be 4.0 or greater to BRE report!")
Sys.setenv(RSTUDIO_PANDOC = "C:/Program Files/RStudio/bin/pandoc")
file_name <- "BREdailyreport.html"
if(!file.exists("~/temprMarkdownRender")){
dir.create("~/temprMarkdownRender")
}
#Determine output file + path
intermediate_path <- "~/temprMarkdownRender"
output_path <- file.path(intermediate_path, "doc")
output_doc <- file.path(output_path, file_name)
rmarkdown::render(input = file.path(ROOT, "tasks", "BREreport", "report", "BREdailyreport.Rmd"),
intermediates_dir = intermediate_path,
output_dir = output_path,
output_file = file_name
)
flog.info("Copying the report to the root directory ... ")
file.copy(
overwrite = T,
output_doc,
file.path(ROOT, "tasks", "BREreport")
)
flog.info("Copying to the _Report archive ... ")
file.copy(
overwrite = T,
output_doc,
file.path(dirname(dirname(ROOT)), "_Reports/BREdailyreport"),
)
static <- readr::read_csv("./config/bre_users.csv", show_col_types = F)
flog.info("Sending email summary")
run_date <- Sys.time()
nostro <- c(nostro_errors, nostro_warnings)
if(!is.null(nostro)){
nostro_result <- c(nostro_errors, nostro_warnings) %>%
tidyr::as_tibble() %>%
magrittr::set_names(c("")) %>%
tableHTML::tableHTML(rownames = FALSE)
} else{
nostro_result <- data.frame()
}
repo_shorts_results <- shorts %>%
tidyr::as_tibble() %>%
tableHTML::tableHTML(rownames = FALSE)
repo_special_results <- specials %>%
tidyr::as_tibble() %>%
tableHTML::tableHTML(rownames = FALSE)
# HTML formatting
body <- stringr::str_c(
paste0("Please find the latest BRE report attached, the report was generated at  ", format(run_date, "%d-%b %Y, %H:%M"),
" \n \n ",
"<br>",
"<br>",
" Nostro report results:",
"<br>",
paste0(
"<html><head>
<style>
body{font-family:Arial, \"sans-serif\";}
table{border-left:1px solid #000000;border-top:1px solid #000000;}
table td{border-right:1px solid #000000;border-bottom:1px solid #000000;font-size:12px; font-weight:normal;}
table th{border-right:1px solid #000000;border-bottom:1px solid #000000;font-size:14px;}
</style>
</head><body>",
nostro_result,
"</body></html>"
),
"<br>",
"<br>",
"\n  ",
" Repo short covers (up to t + 10):",
" <br> ",
" <br> ",
paste0(
"<html><head>
<style>
body{font-family:Arial, \"sans-serif\";}
table{border-left:1px solid #000000;border-top:1px solid #000000;}
table td{border-right:1px solid #000000;border-bottom:1px solid #000000;font-size:12px; font-weight:normal;}
table th{border-right:1px solid #000000;border-bottom:1px solid #000000;font-size:14px;}
</style>
</head><body>",
repo_shorts_results,
"</body></html>"
),
"<br>",
"<br>",
"\n  ",
" Repo specials rolling off (up to t + 10):",
" <br> ",
" <br> ",
paste0(
"<html><head>
<style>
body{font-family:Arial, \"sans-serif\";}
table{border-left:1px solid #000000;border-top:1px solid #000000;}
table td{border-right:1px solid #000000;border-bottom:1px solid #000000;font-size:12px; font-weight:normal;}
table th{border-right:1px solid #000000;border-bottom:1px solid #000000;font-size:14px;}
</style>
</head><body>",
repo_special_results,
"</body></html>"
),
"<br>",
"<br>",
"if you have any questions please contact: \n \n ",
"<br>",
"<br>",
"Nicole.Webster@bankofengland.co.uk   or \n ",
"<br>",
"Nirvar.Singh@bankofengland.co.uk \n \n \n ",
"<br>",
"<br>",
"Note: this is an automated email."
))
Outlook <- RDCOMClient::COMCreate("Outlook.Application")
Email = Outlook$CreateItem(0)
Email[["to"]] = paste(static$email, collapse = "; ")
Email[["subject"]] = paste0("BRE daily report ", format(run_date, "%d-%b %Y"))
Email[["HTMLbody"]] = body
Email[["attachments"]]$Add(file.path(ROOT, "tasks", "BREreport", file_name))
Email$Send()
flog.info("Email sent")
# Delete the temporary file created earlier
if(file.exists("~/temprMarkdownRender")){
unlink("~/temprMarkdownRender", recursive = TRUE)
}
flog.info(Sys.time())
flog.info("Finished")
specials
View(specials)
View(shorts)
nrow(shorts)
length(unique(specials$TICKER))
